package com.flight.assignment;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

import org.junit.Assert;
import org.junit.Test;

public class OptimalRouteTest {

	private List<City> nodes;
	  private List<Flight> edges;

	  @Test
	  public void testExcute() {
	    nodes = new ArrayList<City>();
	    edges = new ArrayList<Flight>();
	    for (int i = 0; i < 11; i++) {
	      City location = new City("City_" + i, "City_" + i);
	      nodes.add(location);
	    }

	    addLane("Edge_0", 0, 1, 85);
	    addLane("Edge_1", 0, 2, 217);
	    addLane("Edge_2", 0, 4, 173);
	    addLane("Edge_3", 2, 6, 186);
	    addLane("Edge_4", 2, 7, 103);
	    addLane("Edge_5", 3, 7, 183);
	    addLane("Edge_6", 5, 8, 250);
	    addLane("Edge_7", 8, 9, 84);	
	    addLane("Edge_8", 7, 9, 167);
	    addLane("Edge_9", 4, 9, 502);
	    addLane("Edge_10", 9, 10, 40);
	    addLane("Edge_11", 1, 10, 600);

	    // Lets check from location Loc_1 to Loc_10
	    Route graph = new Route(nodes, edges);
	    OptimalRoute optimalRoute = new OptimalRoute(graph);
	    optimalRoute.execute(nodes.get(4));
	    LinkedList<City> path = optimalRoute.getPath(nodes.get(10));
	    
	    Assert.assertNotNull(path);
	    Assert.assertTrue(path.size() > 0);
	    
	    for (City vertex : path) {
	      System.out.println(vertex);
	    }
	    
	  }

	  private void addLane(String laneId, int sourceLocNo, int destLocNo,
	      int duration) {
	    Flight lane = new Flight(laneId,nodes.get(sourceLocNo), nodes.get(destLocNo), duration);
	    edges.add(lane);
	  }
}
